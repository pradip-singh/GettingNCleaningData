tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
(my_char, collapse = " ")
(my_char, collapse = "   ")
my_char
(my_char, collapse = " ")
(my_char, collapse = "")
(my_char, collapse)
paste(my_char, collapse = " ")
my_name <- my_char,"Pradip Singh")
my_name <- c(my_char,"Pradip Singh")
my_name
paste(my_name, collapse = " ")
Try paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y", "Z", sep = ""))
paste(1:3, c("X","Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
View(Quiz1)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_na <- (my_data == NA)
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x <- c(rnorm(1:20), rep(NA, 20)
)
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c( x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
names(vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_div
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
y
z
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
x <- c("a", "b, "c", "d")
x <- c("a", "b", "c", "d")
for(i in 1:4) {}
for(i in 1:4) { print(x[i])}
for(i in seq_along(x)){ print(x[i])}
for(i in (x)){ print(letter)}
for(letter in x){ print(letter)}
for(i in 1:4){ print(x(i))}
for(i in 1:4){ print(x[i])}
x<- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){ print(x[i])}
long_string <- "this
is
a
long
string
with
whitespace"
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){}
}
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
x
x<- matrix(1:6)
x
x<- matrix(1:6, 2, 3)
x
print(x[i,j])
count <- 0
while(count <10) {}
count <- 0
while(count < 10){}
x0 <- 1
tol <le-8
tol <- le-8
tol <- 1e-8
tol
x0 <- 1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1-x0) < tol){
break
} else {
x0 <- x1
}
}
for(i in 1:100) {}
for(i in 1:100) {
if(i <=20) {
## skip the first 20 iterations
next()
}
## do something here
}
add2 <- function(x,y) {
x + y
}
add2(3,5)
above10 <- function(x) {
use <- x >10
x[use]
}
above10(x)
above10 <- function(x, n) {
use <- x >n
x[use]
}
x<- 1:20
above10(x,12)
columnmean <- function(y) {
nc <- ncol(y)
means <-  numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <-  numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
Sys.Date()
x <- Sys.time()
x
p <- as.POSIXct(x)
p
names(unclass(p))
library(swirl)
library(swirl)
swirl()
my_vect <- 1:20
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
?lenght
?lenght()
?lenghth()
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?"matrix"
?matrix
swirl()
library(swirl)
library(swirl)
swirl()
matrix(1:20, nrow = 4, n col = 5)
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, n col = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients,deparse.level = 1)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints)>7
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder
remainder(10,4)
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4,div = 2)
args(remainder)
submit()
some_function(add_two_numbers)
some_function(multiply_two_numbers)
evaluate(some_function(add_two_numbers())
)
evaluate(some_function(add_two_numbers())
)
evalutae(some_function(add_two_numbers), 10)
evaluate(some_function(add_two_numbers), 10)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
paste("Programming!")
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
submit()
mad_libs(place = "New Delhi", adjustive = "beautiful", noun = "cat")
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
lapply(cls_list)
lapply(cls_list,f)
lapply()
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class
)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, FUN = )
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
flag_shapes
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(ncol(unique_vals), length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,
| flags$red, summary)
tapply(flags$populationflags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(landmasses$population, landmasses$red, summary)
tapply(flags$population, flags$flags$landmass, summary)
tapply(flags$landmass),  summary)
tapply(flags$landmass)
tapply(flags$animate, flags$landmass,summary)
tapply(flags$population, flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants[1:10])
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
sample(A:Z)
c(a:z)
sample(LETTERS)
LETTERS
sample(LETTERS)
flip <- sample(c(0,1), 100, replace = TRUE,c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom.
??rbinom
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
dl
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months
months(t1)
quarters(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strftime("October 17, 1986 08:24", format = "")
t3 <- strftime("October 17, 1986 08:24", format = "", tz = tz)
?strptime
t3 <- strptime("October 17, 1986 08:24", format = "", tz = tz)
t3 <- strptime("October 17, 1986 08:24", format = "", tz = "")
t3 <- strptime("October 17, 1986 08:24", format = "", tz = "")
t3
t3 <- strptime("October 17, 1986 08:24", "%m %dd/%yyyy %HH:%MM:%OS")
t3
t3 <- strptime("October 17, 1986 08:24", "%B %d ,%Y%Y%Y%Y %H:%M")
t3
t3 <- strptime("October 17, 1986 08:24", "%d/%m/%y %H:%M:%OS")
t3
t3 <- strptime("October 17, 1986 08:24", "%B%d, %y %H:%M:%OS")
MD
install.packages("curl")
a <- available.packages()
a
head((a),3)
install.packages(slidify)
install.packages("slidify")
q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(httr)
require(httpuv)
install.packages("httpuv")
install.packages("httpuv")
require(httpuv)
library(httpuv)
require(httpuv)
require(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library(httr)
require(httpuv)
library(httpuv)
require(httpuv)
library(jsonlite)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "30089bfc635ec5475c05", secret=" b0deca8f122742612e86fe6052f89169631c26b7")
?oauth_app
myapp <- oauth_app("quiz2", "30089bfc635ec5475c05", secret=" b0deca8f122742612e86fe6052f89169631c26b7")
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token
req <- GET("https://api.github.com/users/jtleek/repos", config(token = oauth2.0_token(oauth_endpoints("github")), myapp)
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
installed.packages()
update.packages()
y
update.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
Error in install.packages : Updating loaded packages
install.packages("httr")
update.packages("httr")
library(httr)
require(httpuv)
install.packages("httpuv")
install.packages("httpuv")
library(httpuv)
require(httpuv)
require(jsonlite)
library(jsonlite)
oauth_endpoints("github")
chooseCRANmirror()
q()
debug(ls)
setwd("C:/GettingCleaningData/week_3/Project")
dir()
